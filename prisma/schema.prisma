datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model User {
  id                  String  @id @default(uuid())
  phoneNumber         String  @unique
  // phoneNumberCode                         String?
  phoneNumberVerified Boolean @default(false)
  password            String
  firstName           String
  lastName            String
  profilePicture      String?
  refreshToken        String?

  pushToken    String? // APNS for iOS, FCM for Android
  sandboxToken Boolean? // Check if token is sandbox for iOS

  posts    Post[]
  comments Comment[] @relation(name: "author")

  notifications        Notification[] @relation(name: "target")
  createdNotifications Notification[] @relation(name: "notifAuthor")

  likedComments UserCommentLikeConnection[]
  likedPosts    UserPostLikeConnection[]

  inses UserInsConnection[]
  // pendingINses                            INS[]

  lastAcceptedTermsAndConditionsVersion DateTime?
  lastAcceptedPrivacyPolicyVersion      DateTime?

  lastReadNotificationID String?
  disabledNotifications  NotificationSource[]
}

model PostContent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  isVideo   Boolean
  content   String // Link to raw file
  thumbnail String? // Thumbnail, if it's a video

  post   Post   @relation(name: "post", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  width  Int
  height Int
}

model Post {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  edited       Boolean       @default(false)
  content      String
  mediaContent PostContent[] @relation(name: "post")
  author       User?         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId     String? // Optional because of guest posts, see onboarding service
  comments     Comment[]

  pending           Boolean @default(true)
  totalMediaContent Int

  notifications Notification[] // Some notifications have a post
  likes         UserPostLikeConnection[]
  inses         INS[]
}

model UserPostLikeConnection {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String // relation scalar field (used in the `@relation` attribute above)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  edited    Boolean  @default(false)
  content   String

  //The author is the one who created the comment
  author   User   @relation(name: "author", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  notifications Notification[]

  likes UserCommentLikeConnection[]
}

model UserCommentLikeConnection {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String // relation scalar field (used in the `@relation` attribute above)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())

  @@id([userId, commentId])
}

model Notification {
  id        String             @id @default(uuid())
  createdAt DateTime           @default(now())
  source    NotificationSource
  target    User?              @relation(name: "target", fields: [targetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  targetId  String?

  // Some notifications come from the ether, others from the user
  author   User   @relation(name: "notifAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  ins   INS?    @relation(fields: [insId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  insId String?

  //Some notifications have a related post / comment, sometimes both
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  photoCount Int?
}

model INS {
  id        String  @id @default(uuid())
  name      String
  cover     String?
  shareCode String  @unique

  members             UserInsConnection[]
  posts               Post[]
  invitedPhoneNumbers String[]
  notifications       Notification[]

  createdAt DateTime @default(now())
}

model UserInsConnection {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String // relation scalar field (used in the `@relation` attribute above)
  ins    INS    @relation(fields: [insId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  insId  String // relation scalar field (used in the `@relation` attribute above)

  interactions Int     @default(0)
  pinned       Boolean @default(false)

  role UserRole @default(MEMBER)

  deniedByUsers String[]

  @@id([userId, insId])
}

model CurrentVersions {
  type      DocumentType @id
  updatedAt DateTime     @default(now())
  link      String       @default("")
}

enum DocumentType {
  PRIVACY_POLICY
  TERMS_AND_CONDITIONS
}

enum NotificationSource {
  LIKE_POST
  LIKE_COMMENT
  COMMENT
  POST
  ADDED_PHOTOS
  MESSAGE
  JOINED_INS
  SOMEONE_JOINED_INS
  JOIN_INS_REJECTED
}

enum UserRole {
  ADMIN
  MEMBER
  PENDING
}
