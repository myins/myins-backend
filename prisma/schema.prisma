datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model User {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  phoneNumber         String   @unique
  phoneNumberVerified Boolean  @default(false)
  password            String
  firstName           String
  lastName            String
  profilePicture      String?
  refreshToken        String?

  pushToken    String? // APNS for iOS, FCM for Android
  sandboxToken Boolean? // Check if token is sandbox for iOS

  posts    Post[]
  stories  Story[]
  comments Comment[] @relation(name: "author")

  notifications        Notification[]
  createdNotifications Notification[] @relation(name: "notifAuthor")

  likedComments UserCommentLikeConnection[]
  likedPosts    UserPostLikeConnection[]
  likedStories  UserStoryMediaLikeConnection[]
  viewedStories UserStoryMediaViewConnection[]

  inses UserInsConnection[]

  lastAcceptedTermsAndConditionsVersion DateTime?
  lastAcceptedPrivacyPolicyVersion      DateTime?

  lastReadNotification DateTime  @default(now())
  lastReadRequest      DateTime?

  disabledNotifications  NotificationSource[]
  disabledBiometryINSIds String[]
  disabledAllBiometry    Boolean              @default(false)

  isDeleted Boolean @default(false)
}

model PostContent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  isVideo   Boolean
  content   String // Link to raw file
  thumbnail String? // Thumbnail, if it's a video

  story   Story?  @relation(name: "story", fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyId String?

  width  Int
  height Int

  isHighlight Boolean                        @default(false)
  posts       Post[]
  likes       UserStoryMediaLikeConnection[]
  views       UserStoryMediaViewConnection[]
  stickers    StoryStickers[]

  excludedInses String[]
  notifications Notification[]
}

model Post {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  edited       Boolean       @default(false)
  content      String?
  mediaContent PostContent[]
  author       User?         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId     String? // Optional because of guest posts, see onboarding service
  ins          INS           @relation(fields: [insId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  insId        String
  comments     Comment[]

  pending           Boolean         @default(true)
  totalMediaContent Int
  createdFrom       PostCreatedFrom @default(HOME)

  notifications Notification[]
  likes         UserPostLikeConnection[]

  reportedAt      DateTime?
  reportedByUsers String[]
}

model UserPostLikeConnection {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model Story {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  mediaContent PostContent[] @relation(name: "story")
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId     String

  pending           Boolean @default(true)
  totalMediaContent Int

  inses         StoryInsConnection[]
  notifications Notification[]
}

model UserStoryMediaViewConnection {
  user         User        @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id           String
  storyMedia   PostContent @relation(fields: [storyMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyMediaId String
  ins          INS         @relation(fields: [insId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  insId        String

  createdAt DateTime @default(now())

  @@id([id, storyMediaId, insId])
}

model UserStoryMediaLikeConnection {
  user         User        @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id           String
  storyMedia   PostContent @relation(fields: [storyMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyMediaId String
  ins          INS         @relation(fields: [insId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  insId        String

  createdAt DateTime @default(now())

  @@id([id, storyMediaId, insId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  edited    Boolean  @default(false)
  content   String

  author   User   @relation(name: "author", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  notifications Notification[]

  likes UserCommentLikeConnection[]
}

model UserCommentLikeConnection {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  createdAt DateTime @default(now())

  @@id([userId, commentId])
}

model Notification {
  id        String             @id @default(uuid())
  createdAt DateTime           @default(now())
  source    NotificationSource
  targets   User[]

  author   User   @relation(name: "notifAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  ins   INS?    @relation(fields: [insId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  insId String?

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  story   Story?  @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyId String?

  storyMedia   PostContent? @relation(fields: [storyMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyMediaId String?

  metadata Json?
}

model INS {
  id        String  @id @default(uuid())
  name      String
  cover     String?
  shareCode String  @unique

  members             UserInsConnection[]
  posts               Post[]
  stories             StoryInsConnection[]
  invitedPhoneNumbers String[]
  notifications       Notification[]

  viewedStories UserStoryMediaViewConnection[]
  likedStories  UserStoryMediaLikeConnection[]

  createdAt DateTime @default(now())
}

model UserInsConnection {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  ins    INS    @relation(fields: [insId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  insId  String

  interactions  Int       @default(0)
  pinned        Boolean   @default(false)
  muteUntil     DateTime?
  lastClearedAt DateTime?

  role UserRole @default(MEMBER)

  invitedBy     String?
  deniedByUsers String[]

  createdAt DateTime @default(now())

  @@id([userId, insId])
}

model StoryInsConnection {
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyId String
  ins     INS    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id      String

  createdAt DateTime @default(now())

  @@id([storyId, id])
}

model StoryStickers {
  id           String      @id @default(uuid())
  storyMedia   PostContent @relation(fields: [storyMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyMediaId String
  createdAt    DateTime    @default(now())

  type             StoryStickerType
  normalizedX      Decimal
  normalizedY      Decimal
  normalizedWidth  Decimal
  normalizedHeight Decimal
  value            String
  subType          String?
  rotation         Decimal
  scaleX           Decimal?
  scaleY           Decimal?

  //Text values
  normalizedFontSize Decimal?
  textAlign          String?
  font               String?
  color              String?
}

model CurrentVersions {
  type      DocumentType @id
  updatedAt DateTime     @default(now())
  link      String       @default("")
}

model Analytics {
  id        String        @id @default(uuid())
  type      AnalyticsType
  createdAt DateTime      @default(now())
  count     Int           @default(1)

  metadata Json?
}

model Session {
  id        String   @id @default(uuid())
  userId    String?
  createdAt DateTime @default(now())
}

enum DocumentType {
  PRIVACY_POLICY
  TERMS_AND_CONDITIONS
}

enum NotificationSource {
  LIKE_POST
  LIKE_COMMENT
  COMMENT
  POST
  JOINED_INS
  JOIN_INS_REJECTED
  MESSAGE
  CHANGE_ADMIN
  DELETED_INS
  PENDING_INS
  STORY
  LIKE_STORY
  DELETED_POST_BY_ADMIN
}

enum UserRole {
  ADMIN
  MEMBER
  PENDING
}

enum StoryStickerType {
  TEXT
  LOCATION
  IMAGE
}

enum PostCreatedFrom {
  HOME
  INS
  STORY
}

enum AnalyticsType {
  DELETED_ACCOUNT
  INVITE_MYINS_USER
  INVITE_NON_USER
  ACCEPTED_MYINS_USER
  ACCEPTED_NON_USER
}
